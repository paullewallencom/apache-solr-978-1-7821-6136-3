<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>solrbook</groupId>
  <artifactId>SolrJForMusicBrainz</artifactId>
  <packaging>jar</packaging>
  <version>1.3</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <solr.version>4.8.1</solr.version>
    <slf4j.version>1.7.6</slf4j.version>
  </properties>

  <name>SolrJ For MusicBrainz</name>

  <dependencies>

    <!-- For testing plugins/extenssions to Solr:
    Note: We MUST have solr-test-framework BEFORE solr-core on the classpath. See SOLR-3048. -->
    <dependency>
      <groupId>org.apache.solr</groupId>
      <artifactId>solr-test-framework</artifactId>
      <version>${solr.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- transitively includes JUnit and RandomizedTesting -->

    <!-- For EmbeddedSolrServer and for writing Solr plugins/extensions: -->
    <dependency>
      <groupId>org.apache.solr</groupId>
      <artifactId>solr-core</artifactId>
      <version>${solr.version}</version>
      <scope>compile</scope>
    </dependency>
    <!-- Note: some older Solr versions transitively included certain logging dependencies that
    you would have to exclude if you wanted a different logging framework. -->

    <!-- SolrJ: Used to remotely communicate with Solr.
            (FYI transitively included by solr-core) -->
    <dependency>
      <groupId>org.apache.solr</groupId>
      <artifactId>solr-solrj</artifactId>
      <version>${solr.version}</version>
      <scope>compile</scope>
    </dependency>
    <!-- Note: You don't necessarily need all of SolrJ's transitive dependencies.
     Consider excluding some. Woodstox is never truly needed, Noggit is only for JSON,
     ZooKeeper is only for SolrCloud. -->

    <!-- Heritrix is a web crawler used in our example code: -->
    <dependency>
      <groupId>org.archive.heritrix</groupId>
      <artifactId>heritrix-commons</artifactId>
      <version>3.2.0</version>
    </dependency>

    <!-- Logging:
     We chose to use Log4j via SLF4J.  Other options are available. -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>

      <!-- nocommit TODO demo Surefire/RandomizedTesting setup? -->

      <!-- nocommit do we need this?  why? exec:java instead? -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>1.2.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer
                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>solrbook.BrainzSolrClient</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <repositories>
    <repository>
      <id>heritrix</id>
      <url>http://builds.archive.org/maven2</url>
    </repository>
  </repositories>

</project>
