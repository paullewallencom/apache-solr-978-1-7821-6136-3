{
  "name": "solr-security-proxy",
  "description": "reverse proxy to secure solr, rejecting requests that might modify the solr index.",
  "keywords": [
    "solr",
    "security",
    "ajax-solr",
    "server"
  ],
  "version": "0.0.5",
  "author": {
    "name": "Alex Dergachev",
    "email": "alex@evolvingweb.ca"
  },
  "bugs": {
    "url": "https://github.com/dergachev/solr-security-proxy/issues"
  },
  "main": "solr-security-proxy.js",
  "scripts": {
    "start": "node solr-security-proxy.js",
    "test": "./node_modules/.bin/vows test/test-*.js --spec"
  },
  "bin": {
    "solr-security-proxy": "./solr-security-proxy.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dergachev/solr-security-proxy.git"
  },
  "dependencies": {
    "http-proxy": "0.10.1",
    "optimist": "0.4.0"
  },
  "devDependencies": {
    "request": "2.16.6",
    "vows": "0.7.0"
  },
  "engines": {
    "node": ">=0.6.12"
  },
  "license": "GPL",
  "readme": "solr-security-proxy\n===================\n\nNode.js based reverse proxy to make a solr instance read-only, rejecting requests that have the potential to modify the solr index.\n\nIntended for use with the [AJAX-Solr library](https://github.com/evolvingweb/ajax-solr)\nand similar applications.\n\n[![Build Status](https://secure.travis-ci.org/dergachev/solr-security-proxy.png)](http://travis-ci.org/dergachev/solr-security-proxy)\n\nInstallation and usage\n----------------------\n\nTo install solr-security-proxy via npm:\n\n```bash\nnpm install solr-security-proxy\n```\n\nTo start the proxy directly via command-line, run\n\n```bash\n`npm bin`/solr-security-proxy --port 9090 --backend.host 127.0.0.1 --backend.port 8983\n\n# solr-security-proxy: localhost:9090 --> 127.0.0.1:8983\n```\n\nThe valid command-line options are as follows:\n\n```\n    Usage: node ./node_modules/.bin/solr-security-proxy\n\n    Options:\n      --port            Listen on this port                         [default: 8008]\n      --backend.port    Solr backend port                           [default: 8080]\n      --backend.host    Solr backend host                           [default: \"localhost\"]\n      --validPaths      Only allow these paths (comma separated)    [default: \"/solr/select\"]\n      --invalidParams   Block these query params (comma separated)  [default: \"qt,stream\"]\n      --invalidMethods  Block these HTTP methods (comma separated)  [default: \"POST\"]\n      --help, -h        Show usage\n```\n\nTo start the server from your own app, potentially overriding some default options:\n\n```js\nvar SolrSecurityProxy = require('solr-security-proxy');\nSolrSecurityProxy.start(8008, {validPaths: ['/solr/core1/select']);\n```\n\nHere are the default options:\n\n```js\nvar defaultOptions = {\n  invalidHttpMethods: ['POST'],     // all other HTTP methods (eg GET, HEAD, PUT, etc) will be allowed\n  validPaths: ['/solr/select'],     // all other paths will be denied\n  invalidParams: ['qt', 'stream'],  // blocks requests with params qt or stream.* (all other params are allowed)\n  validator: function(){},          // customized validator function; receives (request, options) as arguments\n  backend: {                        // proxy to solr at this location\n    host: 'localhost',\n    port: 8080\n  }\n};\n```\n\n### Daemontools\n\nFor notes on how to setup daemontools to automatically start/restart the proxy, see \n[DAEMONTOOLS.md](https://github.com/dergachev/solr-security-proxy/blob/master/DAEMONTOOLS.md)\n\nHow it works\n------------\n\nWithout this proxy, the following requests can cause trouble:\n\n```bash\n# access to /solr/admin\ncurl http://example.com:8080/solr/admin\n\n# addition of a new document, via POST to /solr/update\ncurl http://example.com:8080/solr/update?comit=true\n  -H \"Content-Type: text/xml\"\n  --data-binary '<add><doc><field name=\"id\">testdoc</field></doc></add>'\n\n# deleting of all documents, via POST to /solr/update\ncurl http://example.com:8080/solr/update?comit=true\n  -H \"Content-Type: text/xml\"\n  --data-binary '<delete><query>*:*</query></delete>'\n\n# deleting all the documents, via GET to /update?stream.body=<delete><query>*:*</query></delete>&commit=true\ncurl http://example.com:8080/solr/update?stream.body=%3Cdelete%3E%3Cquery%3E*%3A*%3C%2Fquery%3E%3C%2Fdelete%3E%0A\ncurl http://example.com:8080/solr/update?stream.body=%3Ccommit/%3E\n\n# Triggering remote streaming via GET to /solr/selec\n#   ?stream.url=http://example.com:8080/solr/update?commit=true\n#   &stream.body=<delete><query>*:*</query></delete>\n# See https://issues.apache.org/jira/browse/SOLR-2854\ncurl http://example.com:8080/solr/select?q=*:*&indent=on&wt=ruby&rows=2&stream.url=http%3A%2F%2Fexample.com%3A8080%2Fsolr%2Fupdate%3Fcommit%3Dtruetream.body%3D%3Cdelete%3E%3Cquery%3E*%3A*%3C%2Fquery%3E%3C%2Fdelete%3E\n\n# deleting of all documents, via GET to\n#   /solr/select?qt=/update&stream.body=<delete><query>*:*</query></delete>\n# See https://issues.apache.org/jira/browse/SOLR-1233#comment-13169425\n# See https://issues.apache.org/jira/browse/SOLR-3161\ncurl http://example.com:8080/solr/select?qt=/update&stream.body=%3Cd%3E%3Cdelete%3E%3Cquery%3E*%3A*%3C%2Fquery%3E%3C%2Fdelete%3E%3Ccommit%2F%3E%3C%2Fd%3E\n\n```\n\nCurrently, solr-security-proxy addresses these holes by applying the following rules:\n\n* Reject any POST requests\n* Only accept other requests (GET, HEAD, etc...) at \"/solr/select\"\n* Block requests with the following query params: `qt`, `stream.*`\n\nIf there are other types of requests that should be blocked, please open an issue.\n\nCaveats\n-------\n\n\nThis proxy will not do anything unless you actually ensure that your\nSolr container is only being served at 127.0.0.1. If you're using Tomcat with\nthe proxy on the same machine, then add the following to your solr instance's\nserver.xml:\n\n```xml\n<Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"127\\.0\\.0\\.1\"/>\n```\n\nEven with the proxy, the entirety of your solr index is world accessible. If\nyou need to lock it down further, consider maintaining a second core with only\npublic data, or implementing additional Solr request handlers (via\nsolr-config.xml) that specify certain query invariants.\n\nAt the moment, the proxy blacklists the parameters `qt` and `stream.*`. It's\nlikely considerably safer instead whitelist only the parameters your\napplication uses, instead.\n\nFurthermore, this proxy does not guard against simple D.O.S. attacks agains\nsolr, for example see [this post on Solr DOS by David\nSmiley](https://groups.google.com/d/msg/ajax-solr/zhrG-CncrRE/HsyRwmR4mEsJ).\n\nSolr Security Resources\n-----------------------\n\nFor more info about solr security issues, see:\n\n* http://wiki.apache.org/solr/SolrSecurity\n* http://wiki.apache.org/solr/UpdateXmlMessages\n* https://issues.apache.org/jira/browse/SOLR-2854 (remote streaming bug)\n* https://issues.apache.org/jira/browse/SOLR-1233#comment-13169425 (?qt=/update hole)\n* https://issues.apache.org/jira/browse/SOLR-3161 (?qt=/update hole, part 2)\n* http://wiki.apache.org/solr/SolrRequestHandler\n\nFor other solr security proxies, see https://github.com/evolvingweb/ajax-solr/wiki/Solr-proxies\n\nDevelopment\n-----------\n\nTo work on solr-security-proxy, install it as follows:\n\n```bash\ngit clone https://github.com/dergachev/solr-security-proxy.gi\ncd solr-security-proxy\nsudo npm link # installs this version via global symlink\n```\n\nNow you can reference your cloned version in a node app:\n\n```bash\ncd ~/my-node-app\nnpm link solr-security-proxy\n```\n\nTo run the tests, simply run `npm test`.\n\nIf you want to run test-with-solr-instance.js, you need to set the `TEST_SOLR`\nenvironment variable with the URL to your solr server, as follows:\n\n```\nTEST_SOLR=http://127.0.0.1:8081/solr/ npm test\n```\n\nThe format is `PROTOCOL://ADDRESS:PORT/SOLR_PATH/` and must be followed\nexactly.  If solr is on a remote machine, the following will set up an SSH\ntunnel for 30 seconds and then run the tests:\n\n```bash\nssh solrmachine -L 8081:127.0.0.1:8080 -f sleep 30 && TEST_SOLR=http://127.0.0.1:8081/solr/ npm test\n```\n\n### Vagrant\n\nThe accompanying `Vagrantfile` sets up an ubuntu-based node.js stack.\nTo use it to develop the solr-security-proxy:\n\n```bash\nvagrant up\nvagrant ssh\ncd /vagrant\nnpm test\n```\n\n### nodemon\n\nFor automatic restarting of the server upon code changes, install and run nodemon:\n\n```bash\nsudo npm install -g nodemon # install it globally\n# runs the proxy (restarting upon file changes)\nnodemon -L solr-security-proxy.js\n# runs the tests (re-running upon code changes)\nnodemon -L test/test-solr-security-proxy.js\n```\n\nNote that for nodemon to work under Vagrant, \"-L\" (--legacy) is required.\n\nOn VM suspend, nodemon annoyingly goes into the background. Kill it via `pkill -f nodemon`\n\nFor my notes on learning node.js development while building this module, see\n[DEVNOTES.md](https://github.com/dergachev/solr-security-proxy/blob/master/DEVNOTES.md)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/dergachev/solr-security-proxy",
  "_id": "solr-security-proxy@0.0.5",
  "_from": "solr-security-proxy@"
}
