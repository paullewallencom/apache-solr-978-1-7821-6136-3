This document describes the available parameters in the Distributor
configuration file, generally named distributor.conf.  The config file
format is XML, samples are provided with distributor.  Looking at the
sample distributor.conf while reading this document will probably make
things more clear.

distributor element
----------------

Specifies general configuration information

bindaddr:
	IP address or hostname for Distributor to listen on
	If set to "0.0.0.0" then Distributor will bind to the wildcard address
port:
	Port for Distributor to listen on
terminate_on_disable:
	If set to "yes" then Distributor will terminate all connections to
	a target upon detecting that the target has failed.  The default
	behavior is to stop sending new connections to the target but to
	continue to pass traffic for existing connections.
half_close:
	Use TCP half-close when closing connections gracefully.  If this is
	enabled, and EOF is received on one side of the connection, the other
	side of the connection is left open until it also receives EOF.  This
	allows data on the other half of the connection to continue to flow.
	Most services handle this properly, and some depend on it.  Enabled
	by default.
connection_timeout:
	How long to wait for a connection to each target before moving on
	to the next one.  In milliseconds.
connection_failure_limit:
	When a new client connection comes into the load balancer, one or
	more targets are tried until a connection succeeds.  If, in that
	process, a connection to a target fails then a counter for that
	target is incremented.  This counter tracks the number of
	consecutive connections that have failed to that target.  If the
	counter for a target exceeds the value you set for this parameter,
	the target is disabled.  Think of this as a simple service test that
	is conducted during the normal course of the load balancer's operations.
	If you set this parameter to zero then targets will never be disabled
	based on connection failures.  If this parameter is non-zero, make
	sure you have some form of service test enabled.  Otherwise targets
	which are disabled will never get re-enabled.  The "connection"
	service test provides a very basic test just for this purpose if no
	other service testing is needed.
control_port:
	The port that the control server listens on.  Until some form of
	authentication support is added, the control server always listens
	on localhost (127.0.0.1).
service_type:
	Specifies the type of service that the targets are providing.  Used
	to determine what type of service test to use against the targets to
	ensure they are functioning properly, as defined by the type_mapping
	entries at the bottom of the config file.
	Valid values:  none, ldap, http, script, connect

algorithms element
------------------

Distribution algorithms control how incoming connections are distributed
to back-end servers (targets).  Algorithms fall into two major groups:
those that attempt to send a repeat connection back to the server that
last serviced that client, and those that attempt to distribute
connections across all servers in an even fashion.  You may or may not
need one of the first type, but always need one of the second type.

hash algorithm:
	Stores entries in a hash table mapping client IP addresses to back-end
	servers.  Repeat connections from the same IP address are sent back to
	the same server.  Doesn't perform well if you have many seperate user
	sessions coming from the same IP address (i.e. lots of users behind a
	web proxy or NAT box).
httpcookie algorithm:
	Stores an HTTP cookie on the user's machine with a record of the
	back-end server the user last connected to.  Repeat connections from
	that user are sent back to the same server.  Performs better than the
	hash algorithm when dealing with users behind proxies, etc. but thwarted
	by users who have cookies disabled.  Only works for HTTP obviously.
roundrobin algorithm:
	Cycles through all servers in the first target group, then moves on to
	the second target group, etc. until it finds a target that it can
	connect to.  Presuming all connections last roughly the same amount of
	time, this algorithm should do a reasonable job of balancing the load.

target_group element
--------------------

Targets are the servers that Distributor distributes traffic to.
Targets are grouped into a list of groups.  The LB will try all of the
servers in the first group, and only if they are all unavailable it
will proceed to the servers in the second group, etc.

	target element
	--------------
	hostname:
		Hopefully obvious
	port:
		Same here

log element
-----------

Specifies the logging done by the LB.

type:
	Valid values:  console, file
	Console loggers log to standard error
level:
	Controls how much gets logged
	Valid values:  off|severe|warning|info|config|fine|finer|finest|all

LDAP test_parameters element
----------------------------

The parameters for the testing done if the targets are providing LDAP
services.

frequency:
	How often to test each target.  In milliseconds.
timeout:
	How long to give the test to complete for a target before giving
	up and declaring the target dead.  In milliseconds.
ssl_type:
	Valid values:  none, ldaps, starttls
ssl_keystore:
	Java Keystore containing the certificate of the CA that signed your
	LDAP server SSL certificates.  If ssl_type is "none" then this is
	ignored.  If your SSL certs were signed by a major CA like Verisign
	or Thawte you can probably skip this and let Java use its default
	Keystore which has those CA certs.  Otherwise you'll need to create
	this Keystore:
	keytool -keystore <filename> -import -file /path/to/ca.pem -alias <myca>
	(It will prompt for a password, it doesn't matter what you enter)
auth_type:
	Valid values:  none, simple, sasl
sasl_mechanism:
	If auth_type is not "sasl" then this is ignored.
auth_principal:
	Generally a username.  If auth_type is "none" then this is ignored.
auth_credential:
	Generally a password.  If auth_type is "none" then this is ignored.

	querydn element
	---------------
	The DN to lookup, must be fully qualified.

		required_attribute
		------------------
		Specifies an attribute that the queried DN must have

		name:
			The attribute name
		value:
			The optional value that the attribute must have.  If not
			specified the attribute will be accepted no matter what
			value it has.

HTTP test_parameters element
----------------------------

The parameters for the testing done if the targets are providing HTTP
services.

frequency:
	How often to test each target.  In milliseconds.
timeout:
	How long to give the test to complete for a target before giving
	up and declaring the target dead.  In milliseconds.
user_agent:
	The string that distributor will use in the User-Agent field (aka
	"browser") when communicating with the HTTP server.  Some web
	servers are configured to send different pages based on the browser that
	the client is using so you might need to pretend to be a certain
	browser.  This setting is optional.
use_ssl:
	Valid values:  yes, no
auth_type:
	Valid values:  none, basic, digest
auth_principal:
	Generally a username.  If auth_type is "none" then this is ignored.
auth_credential:
	Generally a password.  If auth_type is "none" then this is ignored.

	get element
	------------
	Document to GET from server

	path:
		The path to the document you want tested.  The test module will
		assemble a URL for each back end server as follows:
		http[s]://<server:<port>/<path>

		response_code
		-------------
		Specifies that the server must return a specific response code
		for this document.

		value:
			The numeric response code that must be returned.

		content_type
		------------
		Specifies that the server must return a specific content type
		(aka MIME type) for this document

		value:
			The content type that must be returned

		document_text
		-------------
		Specifies text that must occur in this document.  Currently the
		matching is done line-by-line so the given text must occur on
		one line in the document.

		value:
			The text to search for

Script test_parameters element
----------------------------

A special type of service test which allows you to provide a
script/program to do the testing.  The script will be executed with
the hostname and port of a server to test and should return 0 if the
server is functioning, non-zero if it is not.

frequency:
	How often to test each target.  In milliseconds.
timeout:
	How long to give the test to complete for a target before giving
	up and declaring the target dead.  In milliseconds.
script:
	The script/program to execute.  The server hostname and port will
	be provided as command line arguments 1 and 2.

Connection test_parameters element
----------------------------------

This service test simply attempts to make a TCP connection to the
target.  Only necessary if you have connection_failure_limit enabled but
have no other service testing needs.

frequency:
	How often to test each target.  In milliseconds.
timeout:
	How long to give the TCP connection to complete for a target before
	giving up and declaring the target dead.  You should set this value
	the same as connection_timeout, otherwise you could create a
	flip-flip situation if the server is responding slower than
	connection_timeout but faster that this timeout.  In milliseconds.

algo_mapping element
--------------------

Maps a distribution algorithm to a Java class that will perform that
algorithm.  Only needs to be modified when adding a new distribution
algorithm.

type_mapping element
--------------------

Maps a service type to a Java class that will perform that test.  Only
needs to be modified when adding a new service type.

